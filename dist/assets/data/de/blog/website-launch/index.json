{"hash":"a86ebf3945870673f0dcc2728c28aa251930d892","data":{"storyblokEntry":{"id":"story-13964086-default","slug":"website-launch","content":{"_uid":"de252f3d-43d1-408b-962b-7a1db69d0537","body":[{"_uid":"75c7de41-f8e3-49c1-beb6-14556865d0a5","content":"## Warum so lange?\n\nIch habe meine ersten persönlichen \"Websites\" Mitte der 90er Jahre erstellt und werde aus gutem Grund hier nicht näher auf Details eingehen… Die älteren Leser werden sich vielleicht an die guten alten Zeiten von \"Framesets\", viel zu viele blinkende Gifs und an Inhalt direkt im HTML-Markup erinnern. (Ja, Jamstack hat auch schon die 90er Jahre dominiert ...). Für die Jüngeren: Ich habe versucht, ein paar meiner Seiten auf Webarchiven zu finden. Doch selbst die Archive haben einen Sinn für Ästhetik und diese anscheinend rückstandlos entfernt ... Um euch dennoch einen Eindruck vermitteln zu können: Kreatives Webdesign in den 90ern sah so aus (und kommt meinen schöpferischen Ergüssen sehr nahe):","component":"SimpleText","_editable":"<!--#storyblok#{\"name\": \"SimpleText\", \"space\": \"84148\", \"uid\": \"75c7de41-f8e3-49c1-beb6-14556865d0a5\", \"id\": \"13964086\"}-->"},{"_uid":"c246ec86-0b63-4a54-8db1-531c006a86a1","content":"Ich nahm eine völlig andere berufliche Richtung ein und spielte nur mit ein paar kleinen persönlichen und familiären Projekten herum, bis ich auch beruflich zu meiner wahren Leidenschaft zurückkehrte: der Entwicklung von Websites und Webanwendungen. Aber immer noch keine persönliche Webseite. Warum? Weil es bei einer persönlichen Webseite nicht nur um das Programmieren geht, sondern auch um das Zusammenstellen von Inhalten. Und natürlich um das Schreiben dieser. Heutzutage vorzugsweise in mindestens zwei Sprachen. Und so habe ich mehrmals immer wieder angefangen ... aber nie eine persönliche Seite mit echtem Inhalt beendet. Jetzt ist also der Bann gebrochen (obwohl ich mir ziemlich sicher bin, dass dieser Blog-Bereich nicht der aktivste im www sein wird).","component":"SimpleText","_editable":"<!--#storyblok#{\"name\": \"SimpleText\", \"space\": \"84148\", \"uid\": \"c246ec86-0b63-4a54-8db1-531c006a86a1\", \"id\": \"13964086\"}-->"},{"_uid":"5d51d780-69fe-4d63-a05b-6b2d9877bf34","columns":[{"_uid":"8f3a67dc-1444-482a-bdea-d30d2a9b1d44","image":{"id":1193880,"alt":"Website Access nevada 1995","name":"","focus":null,"title":null,"filename":"https://a.storyblok.com/f/84148/830x910/19de24d702/access-nevada-1995.png","copyright":"https://www.webdesignmuseum.org/","fieldtype":"asset"},"component":"ImageBlock","description":"","_editable":"<!--#storyblok#{\"name\": \"ImageBlock\", \"space\": \"84148\", \"uid\": \"8f3a67dc-1444-482a-bdea-d30d2a9b1d44\", \"id\": \"13964086\"}-->"},{"_uid":"b22a8cca-fd58-46e5-9f56-dbb9ed6e5ea6","image":{"id":1193879,"alt":"Website Antonio Banders 1996","name":"","focus":null,"title":null,"filename":"https://a.storyblok.com/f/84148/830x760/35b98dc0f8/antonio-banderas-1995.png","copyright":null,"fieldtype":"asset"},"component":"ImageBlock","description":"","_editable":"<!--#storyblok#{\"name\": \"ImageBlock\", \"space\": \"84148\", \"uid\": \"b22a8cca-fd58-46e5-9f56-dbb9ed6e5ea6\", \"id\": \"13964086\"}-->"},{"_uid":"2030f181-991f-4e51-8220-4a152e2250cc","image":{"id":1193881,"alt":"Website Lego 1997","name":"","focus":null,"title":null,"filename":"https://a.storyblok.com/f/84148/990x1040/bb956df0ed/lego-1997.png","copyright":"https://www.webdesignmuseum.org/","fieldtype":"asset"},"component":"ImageBlock","description":"","_editable":"<!--#storyblok#{\"name\": \"ImageBlock\", \"space\": \"84148\", \"uid\": \"2030f181-991f-4e51-8220-4a152e2250cc\", \"id\": \"13964086\"}-->"}],"stacked":"","component":"grid","containerwidth":"","_editable":"<!--#storyblok#{\"name\": \"grid\", \"space\": \"84148\", \"uid\": \"5d51d780-69fe-4d63-a05b-6b2d9877bf34\", \"id\": \"13964086\"}-->"},{"_uid":"575ebb80-bb98-49c6-9c66-fe34cbfab190","content":"## Warum jetzt?\n\nIch bin eine Fullstack-Entwicklerin, daher bin ich es gewohnt, das Datenbankdesign und die gesamte serverseitige Logik zu erstellen, sowie mit HTML, CSS und JavaScript herumzuspielen. Und plötzlich begann ein besonderer Begriff meine Newsletter zu überfluten: der „Jamstack“. Nach einigen kleinen Testapps und einigen hervorragenden Tutorials brauchte ich ein “reales” Projekt, um tiefer in die gesamte “static-headless-jamstack-soup” einzutauchen. Warum also nicht (endlich) eine persönliche Jam-Seite ins Netz stellen?","component":"SimpleText","_editable":"<!--#storyblok#{\"name\": \"SimpleText\", \"space\": \"84148\", \"uid\": \"575ebb80-bb98-49c6-9c66-fe34cbfab190\", \"id\": \"13964086\"}-->"},{"_uid":"b22f7374-48f3-4800-88b1-993426df17f3","content":"## Welcher Tech-Stack?\n\nDas Ökosystem rund um den Jamstack ist riesig. Und es entwickelt sich extrem schnell. Bei einer persönlichen Website, liegt der Schwerpunkt auf dem Inhalt, die direkte Interaktion hält sich in Grenzen, daher wurde für dieses Projekt recht wenig aus dieser “Masse” benötigt. Erste Priorität war ein “Headless CMS”, damit ich überhaupt meine Inhalte erfassen und persistieren konnte. Die einzige dynamische Benutzerinteraktion die ich fürs erste benötigte, war ein einfaches Kontaktformular, auch hier gibt es bereits einige Anbieter zur Auswah.\n\nDie nächste Frage war die Basistechnologie: Welches JavaScript-Framework soll ich verwenden und was ist der beste Static Site Generator für diese Aufgabe?\n\nZuletzt gilt es noch sich Gedanken über die verschiedenen Deloyment-Pipelines sowie die Hosting-Möglichkeiten machen.\n\n### Hosting und Bereitstellung\n\nMir ist natürlich klar, dass ich Netlify, Vercel oder ähnliches verwenden sollte, um eine zeitgemässe “echte” Jamstack Seite zu deployen. ABER: Ich bin immer noch Fullstack-Entwicklerin, was bedeutet, dass ich Server liebe und die Dinge im Core verstehen möchte. Das heisst, dass ich mit einem eigenen Deployment-Workflow herumspielen, Webhooks generieren und integrieren werde, und so weiter.\n\nDa ich in diesem Projekt nicht auf Kunden angewiesen, habe ich die Zeit, das Rad zweimal zu erfinden, und da ich bereits einen eigenen vServer habe, führt auch dies nicht zu zusätzlichen Kosten.\n\nIch kann mir jedoch gut vorstellen, zu einem späteren Zeitpunkt zumindest auf Dienste wie AWS o.ä. zu wechseln.\n\n### Headless CMS\n\nEs gibt so viele großartige CMS-Anbieter: Contentful, DatoCMS, ButterCMS Strapi, Sanity.io, Storyblok... Von letzterem bin ich mittlerweile völlig begeistert. Zunächst gibt es einen kostenlosen Plan mit großartigen inkludierten Features, um die wichtigsten Dinge auszuprobieren. Ein weiterer großer Vorteil ist die Preisgestaltung: Für nur ein paar Dollar im Monat erhaltet ihr eine rollenbasierte Benutzerverwaltung, zahlreiche zusätzliche Apps und vieles mehr. Aber das Killer-Kriterium für mich ist der großartige “Visual Editor”. Während der Entwicklung zeigt die CMS-Vorschau nicht nur jede Änderung an der Website an, sondern Ihr könnt Eure Seiteninhalte gleich direkt in der Live-Vorschau erstellen. Einfach super!\n\n### Fronted Frameworks\n\n**CSS:**\n\nDa ich kein Fan von Bootstrap 4 (werde es mit Version 5 sicher noch einmal versuchen) und Utility-First-Ansätzen wie Tailwind.css bin, arbeite ich regelmäßig mit Bulma oder Zurb Foundation. (Ja, das sage ich sogar, als Laravel-Entwicklerin, wo der TALL-Stack immer mehr an Bedeutung gewinnt.) Vor allem bei kleineren und JS-gesteuerten Projekten verwende ich Bulma mit „SASS/SCSS“, um den Foundation “Overload” zu vermeiden. So auch in diesem.\n\n**JavaScript:**\n\nSeit über drei Jahren arbeite ich mit Vue.js und liebe es. In den Jahren zuvor habe ich auch mit React.js experimentiert und da ich keine Abneigungen gegen jsx habe, hat mich auch das begeistert. Aber seit einiger Zeit keine praktische Erfahrung mehr zu haben, machte die Entscheidung zu Vue.js doch recht einfach. Da Vue.js v3 immer noch in Alpha ist, habe ich mich für die stabilere Version 2 entschieden.\n\n### Statischer Site-Generator\n\nWas die statischen Site-Generatoren betrifft, so finden wir Hugo, den guten alten Jekyll, Gatsby, Next.js, Nuxt.js, Gridsome, aber auch viele Newcomer, die sich immer weiter verbreiten. Da ich mich bereits für Vue.js entschieden hatte und einen der etablierten Vertreter benutzen wollte, musste ich „nur“ zwischen Nuxt.js und Gridsome wählen. Obwohl ich die Arbeit des Nuxt.js-Teams und die Komplexität dieses Frameworks absolut schätze und bewundere, hatte ich das Gefühl, dass Gridsome für ein kleines Projekt wie dieses besser geeignet ist. Trotz der guten allgemeinen Dokumentationslage von Gridsome, sind deutlich weniger Informationen zur Storyblok im Zusammenspiel mit Gridsome als mit Nuxt.js zu finden. Aber diese Herausforderung wollte ich gerne annehmen… Und es hat sich gelohnt. Gridsome ist SEHR schnell, es bietet einen GraphQL-Layer out-of-the-box und natürlich gibt es ein vorkonfiguriertes Storyblok-Plugin, sodass man nicht die gesamte CMS-Anbindung von Grund auf neu erstellen muss. Für die reibungslose Integration bin ich noch auf der Suche nach dem endgültigen Workflow gefunden werden, aber wahrscheinlich bin ich zu sehr von der Nuxt-Storyblok-Integration beeinflusst und muss einfach meine Geisteshaltung ändern.\n\n### Dynamische Funktionen\n\nStatic Sites sind großartig, aber: Sie sind immer noch statisch. Serverless ist auch großartig, aber: Es gibt keinen Server. Ok, wie gesagt: Ich habe zwar einen Server, aber muss ich wirklich serverseitige Skripte und Funktionen starten, um eine recht simple, alltäglich Aufgabe zu erfüllen? Im Moment möchte ich nur ein einfaches Kontaktformular. Warum sich mit Sicherheit, Datenauswertung, Mailservern usw. beschäftigen? Der Einfachheit halber habe ich mich für ein Drittanbieter-Tool namens “Formspree” entschieden. Es bietet einen kostenlosen Plan, diverse Sicherheitseinstellungen, sofort einsatzbereite Captchas und Honeypots und es kann super einfach in die Applikation integriert werden.","component":"SimpleText","_editable":"<!--#storyblok#{\"name\": \"SimpleText\", \"space\": \"84148\", \"uid\": \"b22f7374-48f3-4800-88b1-993426df17f3\", \"id\": \"13964086\"}-->"},{"_uid":"1ee517c6-afa0-4b0e-ae05-8258aadc489b","content":"## Wie weiter?\n\nDerzeit befindet sich meine Website im Beta-Status. Sie funktioniert, aber die Aufgabenliste ist immer noch sehr lang. Und wie wir ja alle wissen: Eine persönliche Website ist sowieso nie „fertig“…\n\nMeine Tasks für die nähere Zukunft sind:\n\n* die Seite wiederholt auf Rechtschreib- und Grammatikfehler prüfen und korrigieren\n* ab und zu einen Blogbeitrag schreiben\n* weitere Showcases veröffentlichn\n\nWeitere, langfristigere Ideen sind:\n\n* Hardcoded Strings entfernen und entweder in zu CMS Inhalten ändern oder in dedizierte Translation-Datenquellen auslagern\n* Abstraktion der einzelnen Komponenten: Zu viele dieser sind sich zu ähnlich\n* Suchfunktion für die Blog-Beiträge hinzufügen\n* Optimieren Sie den gesamten Deployment-Workflows und des Build-Prozesses\n* …","component":"SimpleText","_editable":"<!--#storyblok#{\"name\": \"SimpleText\", \"space\": \"84148\", \"uid\": \"1ee517c6-afa0-4b0e-ae05-8258aadc489b\", \"id\": \"13964086\"}-->"},{"_uid":"edd3081e-2a3b-4425-b293-69add21bc998","content":"### Fazit\n\nIch habe das Entwickeln meiner Seite nach dem Jamstack Prinzip sehr genossen und es machte mir extrem viel Spass. Natürlich bin ich viel zu sehr Fullstack Entwicklerin als dass ich Webserver, Datenbank oder serverseitige Sprachen völlig aufgeben könnte. Aber ich kann mir für die Zukunft sehr wohl einige Projekte vorstellen, bei denen ich den Headless-Ansatz sicher in Betracht ziehen werde.\n\nMein Stack für diese Website ist als der folgende geworden:\n\n* Hosting: vServer (Ubuntu Server) mit installiertem Nginx und Node.js\n* Headless CMS: [storyblok](https://www.storyblok.com/)\n* Formularanbieter: [Formspree](https://formspree.io/)\n* SSG: [Gridsome](https://gridsome.org/)\n* JavaScript Framework: [Vue.js](https://vuejs.org/) (v2)\n* CSS Framework: [Bulma](https://bulma.io/)\n\nFalls ihr mehr an der ganzen Jamstack Philosophie interessiert seid, empfehle ich euch einen Blick auf die folgenden Seiten:\n\n* Grundlagen: [https://jamstack.org/](https://jamstack.org/)\n* Mehr Grundlagen: [https://jamstack.wtf/](https://jamstack.wtf/)\n* Einführung von Netlify: [https://www.netlify.com/jamstack/](https://www.netlify.com/jamstack/)\n* Wie Smashing Magazine Jam wurde: [https://www.smashingmagazine.com/2020/01/migration-from-wordpress-to-jamstack/](https://www.smashingmagazine.com/2020/01/migration-from-wordpress-to-jamstack/)\n* Mythen über den Jamstack: [https://css-tricks.com/5-myths-about-jamstack/](https://css-tricks.com/5-myths-about-jamstack/)\n* Probleme des Jamstacks: [https://www.browserlondon.com/blog/2020/04/20/issues-with-jamstack-you-might-need-backend/](https://www.browserlondon.com/blog/2020/04/20/issues-with-jamstack-you-might-need-backend/)\n* Überblick der Drittanbieter: [https://www.tnd.dev/](https://www.tnd.dev/)","component":"SimpleText","_editable":"<!--#storyblok#{\"name\": \"SimpleText\", \"space\": \"84148\", \"uid\": \"edd3081e-2a3b-4425-b293-69add21bc998\", \"id\": \"13964086\"}-->"}],"heading":"Launch meiner Website","abstract":"Es ist vollbracht! Mein erstes \"vorzeigbares\" Portfolio ist veröffentlicht. In diesem Beitrag werde ich erklären, warum ich so lange gebraucht habe und was letztendlich die Ursache dafür war, dass ich das nun tatsächlich durchgezogen habe. Ich gebe euch ausserdem auch Einblick in die von mir verwendeten Technologien und erzähle euch den Grund, warum ich mich für diese entschieden habe. ","component":"blog","_editable":"<!--#storyblok#{\"name\": \"blog\", \"space\": \"84148\", \"uid\": \"de252f3d-43d1-408b-962b-7a1db69d0537\", \"id\": \"13964086\"}-->"}}},"context":{"id":"story-13964086-default","locale":"de","componentName":null,"showHome":true}}