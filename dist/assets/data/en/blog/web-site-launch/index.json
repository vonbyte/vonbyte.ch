{"hash":"a86ebf3945870673f0dcc2728c28aa251930d892","data":{"storyblokEntry":{"id":"story-13825890-default","slug":"web-site-launch","content":{"_uid":"de252f3d-43d1-408b-962b-7a1db69d0537","body":[{"_uid":"75c7de41-f8e3-49c1-beb6-14556865d0a5","content":"## What took you so long?\n\nI built my first personal \"websites\" in the mid 90s and for a good reason I will not go into details here… Older readers may remember the good old days of \"framesets\", way too many flashing gifs, and content, directly embedded into HTML. (Yes, Jamstack already dominated the 90s). For the younger ones: I tried to find a few of my pages on web archives. But even the archives have a sense of aesthetics and they apparently removed them without leaving any residue ... To give you an impression anyway: Creative web design in the 90s looked like this (and comes very close to my creative outpourings):","component":"SimpleText","_editable":"<!--#storyblok#{\"name\": \"SimpleText\", \"space\": \"84148\", \"uid\": \"75c7de41-f8e3-49c1-beb6-14556865d0a5\", \"id\": \"13825890\"}-->"},{"_uid":"d82d0141-3d77-4e43-ba59-370bd179db94","columns":[{"_uid":"82e92ab9-37ec-490b-be49-5fe75ff5af98","image":{"id":1193880,"alt":"Access Nevada Website 1995","name":"","focus":null,"title":null,"filename":"https://a.storyblok.com/f/84148/830x910/19de24d702/access-nevada-1995.png","copyright":"https://www.webdesignmuseum.org/","fieldtype":"asset"},"component":"ImageBlock","description":"","_editable":"<!--#storyblok#{\"name\": \"ImageBlock\", \"space\": \"84148\", \"uid\": \"82e92ab9-37ec-490b-be49-5fe75ff5af98\", \"id\": \"13825890\"}-->"},{"_uid":"3a659dce-f545-46db-bd1e-a4c586deff67","image":{"id":1193881,"alt":"Lego Website 1996","name":"","focus":null,"title":null,"filename":"https://a.storyblok.com/f/84148/990x1040/bb956df0ed/lego-1997.png","copyright":"https://www.webdesignmuseum.org/","fieldtype":"asset"},"component":"ImageBlock","description":"","_editable":"<!--#storyblok#{\"name\": \"ImageBlock\", \"space\": \"84148\", \"uid\": \"3a659dce-f545-46db-bd1e-a4c586deff67\", \"id\": \"13825890\"}-->"},{"_uid":"6fe97222-00dd-4a61-bb80-d1edad6c4d26","image":{"id":1193879,"alt":"Antonio Banders Website 1996","name":"","focus":null,"title":null,"filename":"https://a.storyblok.com/f/84148/830x760/35b98dc0f8/antonio-banderas-1995.png","copyright":"https://www.webdesignmuseum.org/","fieldtype":"asset"},"component":"ImageBlock","description":"","_editable":"<!--#storyblok#{\"name\": \"ImageBlock\", \"space\": \"84148\", \"uid\": \"6fe97222-00dd-4a61-bb80-d1edad6c4d26\", \"id\": \"13825890\"}-->"}],"stacked":"","component":"grid","containerwidth":"","_editable":"<!--#storyblok#{\"name\": \"grid\", \"space\": \"84148\", \"uid\": \"d82d0141-3d77-4e43-ba59-370bd179db94\", \"id\": \"13825890\"}-->"},{"_uid":"c246ec86-0b63-4a54-8db1-531c006a86a1","content":"I took a completely different professional direction and only played around with a few small personal and family related projects until I returned also professionally to my real passion: developing websites and web applications. But still no personal web page. Why? Because a personal web page is not only about programming but about putting together content, too.. and of course writing it. Nowadays  preferably in at least two languages. And so I started again and again for several times ... but never ended a personal site with real content. So now the spell has been broken (although I'm pretty sure this blog section won't become the most active one on the www).","component":"SimpleText","_editable":"<!--#storyblok#{\"name\": \"SimpleText\", \"space\": \"84148\", \"uid\": \"c246ec86-0b63-4a54-8db1-531c006a86a1\", \"id\": \"13825890\"}-->"},{"_uid":"575ebb80-bb98-49c6-9c66-fe34cbfab190","content":"## Why now?\n\nI am a full stack developer, so I am used to creating the database design and all the server-side logic, as well as to playing around with HTML, CSS and JavaScript. And suddenly a special term started to flood my newsletter: the \"Jamstack\". After a few small test apps and some exciting tutorials, I needed a “real” project to delve deeper into the entire “static-headless-jamstack-soup”. So why not (finally) put a personal jam page online?","component":"SimpleText","_editable":"<!--#storyblok#{\"name\": \"SimpleText\", \"space\": \"84148\", \"uid\": \"575ebb80-bb98-49c6-9c66-fe34cbfab190\", \"id\": \"13825890\"}-->"},{"_uid":"b22f7374-48f3-4800-88b1-993426df17f3","content":"## What is it built with?\n\nThe Jamstack ecosystem is huge. And it is evolving extremely quick. With a personal website the main focus lies on the content, the direct interaction is limited, so very little of this “mass” was needed for this project. The first priority was a “headless CMS” so that I’m able to capture and persist my content in the first place. The only dynamic user interaction that I needed for now was a simple contact form, there are already some providers to choose from.\n\nThe next question was the base technologie: What JavaScript Framework should I use and what is the best static site generator for this task.\n\nAt last I had to consider the different deloyment pipelines as well as the hosting possibilites.\n\n### Hosting and Deployment\n\nIt is clear to me, of course, that I should use Netlify, Vercel or similar to deploy a contemporary “real” Jamstack site, because it is not complicated at all. BUT: I am still a fullstack dev, which means I love servers and I do want to understand things in the core. So: I want to play around with my own deploying workflow, generate webhooks and so on.\n\nSince I am not depending on customers in this project, I do have the time to invent the wheel twice and since I already have my own vServer, this does not lead to additional costs. So that’s the way to go.\n\nHowever, I can very well imagine switching to services such as AWS or similar at a later time.\n\n### Headless CMS\n\nThere are so many great CMS providers out there: Contentful, DatoCMS, ButterCMS Strapi, Sanity.io and Storyblok. I’m totally enthusiastic about the latter. First of all there is a free plan with great features included to figure out the most important core things. Another big advantage is the pricing, for just a few dollars a month, you get a role-based user management, numerous additional apps and much more. But the killer criterion for me is the great “visual editor”. During development, the CMS preview not only shows every change to the website, but you can also create your page content directly in the live preview. Just awesome!\n\n### Fronted Frameworks\n\n**CSS:**\n\nSinceI’m not a Fan of Bootstrap 4 (will definitely try again with version 5) and utility-first approaches like Tailwind, I work regularly with Bulma and Zurb Foundation. (Yes, I even say that as a Laravel developer, where the TALL stack is becoming more and more important.) I use Bulma with \"SASS / SCSS\", especially for smaller and JS-controlled projects (like this one), to avoid the foundatio-\"Overload\".\n\n**JavaScript:**\n\nFor over three years I have been working with Vue.js and I just love it. In the years before I also experimented with React.js and since I have no aversion to jsx, I was enthusiastic about that, two. But having no practical experience for some time made the decision to Vue.js quite easy. Since Vue.js v3 is still in alpha I chose the more stable  version 2.\n\n### Static Site Generator\n\nAs for the Static Site Generators we have Hugo, good old Jekyll, Gatsby, Next.js, Nuxt.js, Gridsome, but also many more that are rising up currently. Since I had already decided to use Vue.js and wanted to use one of the established representatives, I “only” had to choose beween Nuxt.js and Gridsome. Although I totally appreciate and admire the work of the Nuxt.js team and the complexity of that framework, I had the feeling that Gridsome was better suited for a small project like this. Despite the good general documentation situation of Gridsome, there is significantly less information about storyblok in interaction with Gridsome than with Nuxt.js. But I wanted to take on this challenge… And it was worth it. Gridsome is VERY fast, it offers a GraphQL layer out-of-the-box and of course there is a preconfigured storyblok plugin, so you do not have to create the entire CMS connection from scratch. I'm still looking for the final workflow to be found, but I'm probably too influenced by the Nuxt-Storyblok integration and just have to change my mindset.\n\n### Dynamic Features\n\nStatic sites are great, but: they are still static. Serverless is great, too, but: there is no server. Ok, as I said: I DO have a server, but do I really have to fire up serversided scripts and functions to achieve a fairly simple and common task? For now I just want a simple contact form. Why bother with security, data handling mail servers etc.? For the sake of simplicity, I chose a third-party tool called “Formspree”. It offers a free plan, various security settings, ready-to-use captchas and honeypots and it can be easily integrated into the application.","component":"SimpleText","_editable":"<!--#storyblok#{\"name\": \"SimpleText\", \"space\": \"84148\", \"uid\": \"b22f7374-48f3-4800-88b1-993426df17f3\", \"id\": \"13825890\"}-->"},{"_uid":"1ee517c6-afa0-4b0e-ae05-8258aadc489b","content":"## What now?\n\nCurrently my website is in beta state. It works, but the todo list is still very long. And as we all know: A personal website is never “finished” anyway…\n\nMy tasks for the near future are:\n\n* check the page repeatedly… and remove typos and grammatical errors\n* write a blog post every now and then\n* publish mor dev-projects and showcases\n\nLong term ideas are\n\n* remove all hardcoded strings and either move them to the CMS content or to dedicated translation datasources\n* abstract the individual components: there are way to many similar components\n* add a search function for the blog posts\n* optimize the entire deployment workflow and build process\n* …","component":"SimpleText","_editable":"<!--#storyblok#{\"name\": \"SimpleText\", \"space\": \"84148\", \"uid\": \"1ee517c6-afa0-4b0e-ae05-8258aadc489b\", \"id\": \"13825890\"}-->"},{"_uid":"a46a2ba4-f735-4275-9c96-f844136318b8","content":"## Conclusion\n\nI totally enjoyed developing my website following the jamstack priciple. Of course, I’m far too much of a fullstack developer to be able to completely give up web servers, databases and server-side languages. But I can very well imagine some future projects where I will definitely consider the headless approach.\n\nMy Stack for this websitehas turned out to be the following:\n\n* Hosting: vServer (Ubuntu Server) with nginx and node.js installed\n* Headless CMS: [storyblok](https://www.storyblok.com/)\n* Form provider: [Formspree](https://formspree.io/)\n* SSG: [Gridsome](https://gridsome.org/)\n* JavaScript Framework: [Vue.js](https://vuejs.org/) (v2)\n* CSS Framework: [Bulma](https://bulma.io/)\n\nIf you are more interested in the whole Jamstack philosophy, I recommend a look at the following pages:\n\n* Basics: [https://jamstack.org/](https://jamstack.org/)\n* More Basics: [https://jamstack.wtf/](https://jamstack.wtf/)\n* Introduction from Netlify: [https://www.netlify.com/jamstack/](https://www.netlify.com/jamstack/)\n* How Smashing Magazine became Jam: [https://www.smashingmagazine.com/2020/01/migration-from-wordpress-to-jamstack/](https://www.smashingmagazine.com/2020/01/migration-from-wordpress-to-jamstack/)\n* Myths about Jamstack: [https://css-tricks.com/5-myths-about-jamstack/](https://css-tricks.com/5-myths-about-jamstack/)\n* Issues with the Jamstack: [https://www.browserlondon.com/blog/2020/04/20/issues-with-jamstack-you-might-need-backend/](https://www.browserlondon.com/blog/2020/04/20/issues-with-jamstack-you-might-need-backend/)\n* Overview of third-party providers: [https://www.tnd.dev/](https://www.tnd.dev/)\n\n` `","component":"SimpleText","_editable":"<!--#storyblok#{\"name\": \"SimpleText\", \"space\": \"84148\", \"uid\": \"a46a2ba4-f735-4275-9c96-f844136318b8\", \"id\": \"13825890\"}-->"}],"heading":"Web site Launch","abstract":"It's done. My first \"presentable\" portfolio is published. In this post I'd like to explain what took me so long and what ultimately caused me got through with it. You will also get some information on the technologiesI used and the reasons why I chose them. ","component":"blog","_editable":"<!--#storyblok#{\"name\": \"blog\", \"space\": \"84148\", \"uid\": \"de252f3d-43d1-408b-962b-7a1db69d0537\", \"id\": \"13825890\"}-->"}}},"context":{"id":"story-13825890-default","locale":"en","componentName":null,"showHome":true}}