# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
}

interface Node {
  id: ID!
}

interface NodeConnection {
  edges: [NodeConnectionEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

interface NodeConnectionEdge {
  next: Node
  node: Node
  previous: Node
}

type Metadata {
  pathPrefix: String
  siteDescription: String
  siteName: String
  siteUrl: String
}

type Page {
  context: JSON!
  path: String!
}

type PageInfo {
  currentPage: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  isFirst: Boolean!
  isLast: Boolean!
  perPage: Int!
  totalItems: Int!
  totalPages: Int!
}

type Query {
  allPage(
    "Filter pages."
    filter: PageFilterInput
  ): [Page]
  metaData: Metadata @deprecated(reason : "Use Query.metadata instead.")
  metadata: Metadata
  page(path: String!): Page
}

enum ImageFit {
  "Embed within both provided dimensions."
  contain
  "Crop to cover both provided dimensions."
  cover
  "Ignore the aspect ratio of the input and stretch to both provided dimensions."
  fill
  "Preserving aspect ratio, resize the image to be as large as possible while ensuring its dimensions are less than or equal to both those specified."
  inside
  "Preserving aspect ratio, resize the image to be as small as possible while ensuring its dimensions are greater than or equal to both those specified. Some of these values are based on the object-fit CSS property."
  outside
}

enum SortOrder {
  "Sort ascending"
  ASC
  "Sort descending"
  DESC
}

input JSONQueryOperatorInput {
  "Filter by property of (strict) equality."
  eq: JSON
  "Filter by property matching any of the provided values."
  in: [JSON]
  "Filter by property not equal to provided value."
  ne: JSON
  "Filter by property not matching any of the provided values."
  nin: [JSON]
  "Filter by property matching provided regular expression."
  regex: String
}

input PageFilterInput {
  context: JSONQueryOperatorInput
  path: StringQueryOperatorInput
}

input SortArgument {
  by: String! = "date"
  order: SortOrder = DESC
}

input StringQueryOperatorInput {
  "Filter by property of (strict) equality."
  eq: String
  "Filter by property matching any of the provided values."
  in: [String]
  "Filter by property not equal to provided value."
  ne: String
  "Filter by property not matching any of the provided values."
  nin: [String]
  "Filter by property matching provided regular expression."
  regex: String
}


"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

scalar Date

scalar File

scalar Image
